import numpy as np
import cv2
import scipy.ndimage
import timeit
#region Goal Blobs

def PlayerLaplacianOfGaussians(image,RGBimage):
    start_time = timeit.default_timer()
    lap = scipy.ndimage.filters.gaussian_laplace(image,[5,4])
    timing=(timeit.default_timer() - start_time)
    rslt = getPlayAreas(lap,RGBimage)
    #dispGoalPosts(image,rslt)
    return rslt,timing

def PlayerDifferenceOfGaussians(image,RGBimage):
    start_time = timeit.default_timer()
    g1=cv2.GaussianBlur(image, (1,1),0, 0, 0)
    g2=cv2.GaussianBlur(image, (9,9), 0, 0, 0)
    diff = g2-g1
    timing = (timeit.default_timer() - start_time)
    #cv2.imshow('', diff)
    #cv2.waitKey(1010110)
    rslt = getPlayAreas(diff,RGBimage)
    #dispGoalPosts(image,g2)
    return rslt,timing

def getPlayAreas(inVal,rgb):
    thresh = cv2.threshold(inVal, 50, 255, cv2.THRESH_BINARY)[1]
    #cv2.imshow('', thresh)
    #cv2.waitKey(202020202)
    contours, _ = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    contours.sort(key=cv2.contourArea,reverse=True)
    contours=contours[0:10]
    rect= np.array([list(cv2.boundingRect(cnt)) for cnt in contours])
    return recursiveElimination(list(rect),rgb)

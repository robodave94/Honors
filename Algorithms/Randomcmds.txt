#cv2.rectangle(im, (blobobj[0],blobobj[1]),(blobobj[0]+blobobj[2],blobobj[1]+blobobj[3]),(255,255,255),3)
#cv2.rectangle(im, (blobobj[0][0],blobobj[0][1]),(blobobj[0][0]+blobobj[0][2],blobobj[0][1]+blobobj[0][3]),(255,255,255),3)
#cv2.rectangle(im, (blobobj[1][0],blobobj[1][1]),(blobobj[1][0]+blobobj[1][2],blobobj[1][1]+blobobj[1][3]),(255,255,255),3)

 or \
            (PostData[1][1] + PostData[1][3] < PostData[0][1] + PostData[0][3] + 30) and (PostData[1][1] + PostData[1][3] > PostData[0][1] + PostData[0][3] - 30)

                for y in contours:
        x = cv2.boundingRect(y)
        cv2.rectangle(thresh, (x[0], x[1]), (x[0] + x[2], x[1] + x[3]), (255, 255, 255),1)
        if x[2]/x[3]<0.35:
            print x

#brect = np.array([list(cv2.boundingRect(cnt)) for cnt in contours])
    #print brect
    cv2.imshow('', thresh)
    cv2.waitKey(2000000)
    #print contours
    #contours.sort(key=(min([0][0,:])))



def loopFunc(arry):
    c= len(arry)
    for x in range(0,c):
        if not (float(arry[x][3])/arry[x][2]<1.9 and float(arry[x][3])/arry[x][2]>0.1):
            return loopFunc(np.delete(arry, x,axis=0))
    return arry


    '''print (int(circle[0][0]),int(circle[0][1]))
    int(circle[1])
    cv2.circle(x,(int(circle[0][0]),int(circle[0][1])),int(circle[1]),(255,0,255))
    cv2.imshow('', x)
    cv2.waitKey(202020202)'''



    print len(verifiedpx)
    for y in examinationPx:
        if ROI[(y[0],y[1]-1)]==255 and ROI[(y[0]+1,y[1])]==255 and ROI[(y[0]-1,y[1])]==255 and ROI[(y[0],y[1]+1)]==255:
            verifiedpx.append(y)
            examinationPx.remove(y)
            for g in [(y[0],y[1]-1),(y[0]+1,y[1]),(y[0]-1,y[1]),(y[0],y[1]+1)]:
                if g not in verifiedpx:
                    examinationPx.append(g)
            return regionGrow(ROI,examinationPx,verifiedpx)



radSeg=int(ballCandidate[1]/3)
    for i in range(1,3):
        radAng=360/(4+i*4)
        for q in range(0,3+i*4):




def GetCircle(ROI):
    #establish circle algorithm
    #x = SL.ball_bhuman_VerticalFieldSupression(ROI,0.03)
    x = cv2.inRange(ROI,np.array([2, 53, 19], dtype="uint16"),np.array([48, 180, 92], dtype="uint16"))
    x=(255 - x)
    x = cv2.GaussianBlur(x, (11, 11), 0, 0, 0)
    x = cv2.threshold(x, 200, 255, cv2.THRESH_BINARY)[1]
    #cv2.imshow('',x)
    #cv2.imshow('', x)
    #cv2.waitKey(200000)
    #cv2.waitKey(202020202)
    #region grow from middle pixel
    shapeX=x.shape[0]
    pointOrig=np.array((int(shapeX / 2), int(shapeX / 2)))
    if x[pointOrig[0],pointOrig[1]]==255:
        c = regionGrow(x,pointOrig)
        #print type(c)
        if not c is None:
            circle =cv2.minEnclosingCircle(c)
            #cv2.circle(ROI, (int(circle[0][0]), int(circle[0][1])), int(circle[1]), (255, 0, 255))
            # validate circle dimensions
            #print circle
            #cv2.imshow('',ROI)
            #cv2.waitKey(200000)
            if circle[1]<30 and shapeX>circle[1]*2 and circle[0][0]-circle[1]>0 and circle[0][1]-circle[1]>0\
                    and circle[0][0]+circle[1]<shapeX and circle[0][1]+circle[1]<shapeX:
                return circle
    return None




    def GetCircle(ROI):
    x = cv2.inRange(ROI,np.array([2, 53, 19], dtype="uint16"),np.array([48, 180, 92], dtype="uint16"))
    x=(255 - x)
    x = cv2.GaussianBlur(x, (11, 11), 0, 0, 0)
    x = cv2.threshold(x, 200, 255, cv2.THRESH_BINARY)[1]
    cv2.imshow('',x)
    cv2.waitKey(2020202020)
    shapeX=x.shape[0]
    pointOrig=np.array((int(shapeX / 2), int(shapeX / 2)))
    if x[pointOrig[0],pointOrig[1]]==255:
        c = regionGrow(x,pointOrig)
        if not c is None:
            circle =cv2.minEnclosingCircle(c)
            if circle[1]<30 and shapeX>circle[1]*2 and circle[0][0]-circle[1]>0 and circle[0][1]-circle[1]>0\
                    and circle[0][0]+circle[1]<shapeX and circle[0][1]+circle[1]<shapeX:
                return [[int(circle[0][0]),int(circle[0][1])],int(circle[1])]
    return None

def regionGrow(ROI,pntOrig):
    indexA = 0
    indexB = 1
    areapts =[]
    try:
        #region regiongrowing
        exampnt = [pntOrig[0],pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]] == 255:
            exampnt[indexA] = exampnt[indexA] - 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]] == 255:
            exampnt[indexA] = exampnt[indexA] + 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]] == 255:
            exampnt[indexB] = exampnt[indexB] - 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]] == 255:
            exampnt[indexB] = exampnt[indexB] + 1
        areapts.append(np.array(exampnt))

        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]] == 255:
            exampnt[indexB] = exampnt[indexB] + 1
            exampnt[indexA] = exampnt[indexA] + 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]] == 255:
            exampnt[indexB] = exampnt[indexB] - 1
            exampnt[indexA] = exampnt[indexA] - 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB],exampnt[indexA]] == 255:
            exampnt[indexB] = exampnt[indexB]+1
            exampnt[indexA] = exampnt[indexA]-1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]] == 255:
            exampnt[indexB] = exampnt[indexB] - 1
            exampnt[indexA] = exampnt[indexA] + 1
        areapts.append(np.array(exampnt))
        #endregion
        return np.array(areapts)
    except:
        return None


                blue= ROIinput[i[0],i[1]][0]
        red = ROIinput[i[0],i[1]][1]
        green=ROIinput[i[0],i[1]][2]
        if red+20>blue>red-20 and green+20>red>green-20:

        (np.mean(ROIinput[i[0],i[1]]))<55 and



        '''for i in validationpts:
        ROIinput[i[1],i[0]]=(255,50,255)
    cv2.circle(ROIinput, (ballCandidate[0][0],ballCandidate[0][1]), ballCandidate[1], (255, 0, 255))
    cv2.imshow('',ROIinput)
    cv2.waitKey(2020202020)'''



contours.sort( key=cv2.contourArea)
    post1 = cv2.boundingRect(contours[len(contours) - 1])
    post2 = cv2.boundingRect(contours[len(contours) - 2])
    if (post2[2] / float(post2[3])) < 0.35:
        if post1[0] < post2[0]:
            return post1, post2
        else:
            return post2, post1

    return post1

def FieldToPostTransitionLine(img,PostData):
    start_time = timeit.default_timer()
    if len(PostData)==2:
        #get max height of goalpost
        heightGoal=max(PostData[0][3],PostData[1][3])
        postWidth = max(PostData[0][2],PostData[1][2])
        #left=PostData[0], right=PostData[1]
        #run scanlines through a certain point towards the bottom of the image to find the tranisition of yellow to green
        return transitionScanlines_twoLines(img,PostData[0],PostData[1],heightGoal,postWidth), (timeit.default_timer() - start_time)
        
    else:
        #check if the object is a single post or a goal area FIXME test this in generic single context
        if (PostData[2] / float(PostData[3])) <= 0.35:
            lower = np.array([15, 90, 110], dtype="uint16")
            upper = np.array([180, 255, 240], dtype="uint16")
            listBin = np.nonzero(cv2.inRange(img[PostData[1] - 10:PostData[1] + 10,
                                             (PostData[0] - int(PostData[2] * 0.5)):PostData[0] + int(
                                                 PostData[2] * 1.5)], lower, upper))
            #cv2.imshow('',cv2.inRange(img[PostData[1] - 10:PostData[1] + 10,
            #                                 (PostData[0] - int(PostData[2] * 0.5)):PostData[0] + int(
            #                                     PostData[2] * 1.5)], lower, upper))
            #cv2.waitKey(20000)
            #print (PostData[2]),max(listBin[1]),min(listBin[1])
            if (PostData[2] * 2) - max(listBin[1]) > min(listBin[1]):
                return transitionScanlines_singleLines(img, PostData), 'right', (timeit.default_timer() - start_time)
            elif (PostData[2] * 2) - max(listBin[1]) < min(listBin[1]):
                return transitionScanlines_singleLines(img,PostData), 'left', (timeit.default_timer() - start_time)
            else:
                return transitionScanlines_singleLines(img,PostData), 'Unknown', (timeit.default_timer() - start_time)
        else:
            #this is generic goal area,separate area in to two vertical areas that represents the area's possible goalposts
            alterPost = (PostData[0],PostData[1],int(PostData[2]*0.2),PostData[3])
            leftside = transitionScanlines_singleLines(img,alterPost)
            alterPost = (PostData[0]+PostData[2]-int(PostData[2]*0.2),PostData[1],int(PostData[2]*0.2),PostData[3])
            rightside =transitionScanlines_singleLines(img,alterPost)
            return leftside,rightside, (timeit.default_timer() - start_time)




def transitionScanlines_twoLines(im,leftPoint,RightPoint,heightSegment,goalpostWidth):
    #region function variables
    lower=np.array([15, 90, 110], dtype="uint16");upper = np.array([110, 230, 220], dtype="uint16")
    #post areas to find lower area
    leftPostSec = im[leftPoint[1]+heightSegment/2:leftPoint[1]+int(heightSegment*1.5),leftPoint[0]:leftPoint[0]+goalpostWidth]
    rightPostSec = im[RightPoint[1]+heightSegment/2:RightPoint[1]+int(heightSegment*1.5),RightPoint[0]:RightPoint[0]+goalpostWidth]
    #endregion
    x = 0.1
    lftarry = np.array([])
    rgtarry = np.array([])
    #loop through scanlines
    while x < 1:
        index = int(leftPostSec.shape[1] * x) + 1
        #r=2,g=1,b=0
        leftLine = leftPostSec[0:leftPostSec.shape[0], index - 1:index]
        rightLine = rightPostSec[0:rightPostSec.shape[0], index - 1:index]
        z=1
        pt =None
        while cv2.inRange(leftLine[z-1:z], lower,upper)==255:
            z+=1
        if z > 2:
            lftarry=np.append(lftarry,z)
        while cv2.inRange(rightLine[z-1:z], lower,upper)==255:
            z+=1
        if z>2:
            rgtarry=np.append(rgtarry, z)
        x+=0.1

    return (leftPoint[0]+(goalpostWidth/2),(st.mode(np.around(((lftarry/500)),2)*500)[0][0]+leftPoint[1]+heightSegment/2)), \
           (RightPoint[0]+(goalpostWidth/2),(st.mode(np.around(((rgtarry/500)),2)*500)[0][0]+RightPoint[1]+heightSegment/2))


fd, hog_image = hog(ROI, orientations=8, pixels_per_cell=(4, 4),
                        cells_per_block=(1, 1), block_norm='L2')

    print fd

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4), sharex=True, sharey=True)

    ax1.axis('off')
    ax1.imshow(ROI, cmap=plt.cm.gray)
    ax1.set_title('Input image')
    ax1.set_adjustable('box-forced')

    # Rescale histogram for better display
    hog_image_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 0.02))

    ax2.axis('off')
    ax2.imshow(hog_image_rescaled, cmap=plt.cm.gray)
    ax2.set_title('Histogram of Oriented Gradients')
    ax1.set_adjustable('box-forced')
    plt.show()




'''exampnt = [pntOrig[0],pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]][2]+20>ROI[exampnt[indexB], exampnt[indexA]][0]>ROI[exampnt[indexB], exampnt[indexA]][2]-20\
            and ROI[exampnt[indexB], exampnt[indexA]][1]+20>ROI[exampnt[indexB], exampnt[indexA]][2]>ROI[exampnt[indexB], exampnt[indexA]][1]-20:
            exampnt[indexA] = exampnt[indexA] - 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]][2]+20>ROI[exampnt[indexB], exampnt[indexA]][0]>ROI[exampnt[indexB], exampnt[indexA]][2]-20\
            and ROI[exampnt[indexB], exampnt[indexA]][1]+20>ROI[exampnt[indexB], exampnt[indexA]][2]>ROI[exampnt[indexB], exampnt[indexA]][1]-20:
            exampnt[indexA] = exampnt[indexA] + 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]][2]+20>ROI[exampnt[indexB], exampnt[indexA]][0]>ROI[exampnt[indexB], exampnt[indexA]][2]-20\
            and ROI[exampnt[indexB], exampnt[indexA]][1]+20>ROI[exampnt[indexB], exampnt[indexA]][2]>ROI[exampnt[indexB], exampnt[indexA]][1]-20:
            exampnt[indexB] = exampnt[indexB] - 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]][2]+20>ROI[exampnt[indexB], exampnt[indexA]][0]>ROI[exampnt[indexB], exampnt[indexA]][2]-20\
            and ROI[exampnt[indexB], exampnt[indexA]][1]+20>ROI[exampnt[indexB], exampnt[indexA]][2]>ROI[exampnt[indexB], exampnt[indexA]][1]-20:
            exampnt[indexB] = exampnt[indexB] + 1
        areapts.append(np.array(exampnt))

        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]][2]+20>ROI[exampnt[indexB], exampnt[indexA]][0]>ROI[exampnt[indexB], exampnt[indexA]][2]-20\
            and ROI[exampnt[indexB], exampnt[indexA]][1]+20>ROI[exampnt[indexB], exampnt[indexA]][2]>ROI[exampnt[indexB], exampnt[indexA]][1]-20:
            exampnt[indexB] = exampnt[indexB] + 1
            exampnt[indexA] = exampnt[indexA] + 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]][2]+20>ROI[exampnt[indexB], exampnt[indexA]][0]>ROI[exampnt[indexB], exampnt[indexA]][2]-20\
            and ROI[exampnt[indexB], exampnt[indexA]][1]+20>ROI[exampnt[indexB], exampnt[indexA]][2]>ROI[exampnt[indexB], exampnt[indexA]][1]-20:
            exampnt[indexB] = exampnt[indexB] - 1
            exampnt[indexA] = exampnt[indexA] - 1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]][2]+20>ROI[exampnt[indexB], exampnt[indexA]][0]>ROI[exampnt[indexB], exampnt[indexA]][2]-20\
            and ROI[exampnt[indexB], exampnt[indexA]][1]+20>ROI[exampnt[indexB], exampnt[indexA]][2]>ROI[exampnt[indexB], exampnt[indexA]][1]-20:
            exampnt[indexB] = exampnt[indexB]+1
            exampnt[indexA] = exampnt[indexA]-1
        areapts.append(np.array(exampnt))
        exampnt = [pntOrig[0], pntOrig[1]]
        while ROI[exampnt[indexB], exampnt[indexA]][2]+20>ROI[exampnt[indexB], exampnt[indexA]][0]>ROI[exampnt[indexB], exampnt[indexA]][2]-20\
            and ROI[exampnt[indexB], exampnt[indexA]][1]+20>ROI[exampnt[indexB], exampnt[indexA]][2]>ROI[exampnt[indexB], exampnt[indexA]][1]-20:
            exampnt[indexB] = exampnt[indexB] - 1
            exampnt[indexA] = exampnt[indexA] + 1
        areapts.append(np.array(exampnt))'''
